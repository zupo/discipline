# yamllint disable rule:line-length
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

workflows:
  lint_and_test:
    jobs:
      - lint_and_test

jobs:

  lint_and_test:
    environment:
      POETRY_VIRTUALENVS_IN_PROJECT: 1
    docker:
      - image: cimg/python:3.10.4

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
            poetry install

      - save_cache:
          paths:
            - ./.venv
          key: v1-dependencies-{{ checksum "poetry.lock" }}

      - run:
          name: Run linters
          command: poetry run pre-commit run --hook-stage push --all-files

      - run:
          name: Step 1
          command: |
            poetry run pytest --cov-report html --cov=step1 step1.py

            echo "Running scenario code ..."
            echo "
            from step1 import kylo, han
            print(kylo.grandparents)
            print(han.grandparents)
            " | poetry run python &> output.txt || true

            echo "Asserting scenario output ..."
            echo "[Padme Amidala, Anakin Skywalker, None, None]
            Traceback (most recent call last):
              File \"<stdin>\", line 4, in <module>
              File \"/home/circleci/project/step1.py\", line 13, in grandparents
                grandparents.append(self.mother.mother)
            AttributeError: 'NoneType' object has no attribute 'mother'" | diff output.txt -

      - run:
          name: Step 2
          command: |
            poetry run pytest --cov-report html --cov=step2 step2.py

            echo "Running scenario code ..."
            poetry run mypy step2.py &> output.txt || true

            echo "Asserting scenario output ..."
            echo 'step2.py:21: error: Item "None" of "Optional[Person]" has no attribute "mother"
            step2.py:22: error: Item "None" of "Optional[Person]" has no attribute "father"
            step2.py:23: error: Item "None" of "Optional[Person]" has no attribute "mother"
            step2.py:24: error: Item "None" of "Optional[Person]" has no attribute "father"
            Found 4 errors in 1 file (checked 1 source file)' | diff output.txt -

      - run:
          name: Step 3
          command: |
            poetry run pytest --cov-report html --cov=step3 step3.py
            poetry run mypy step3.py

            echo "Running scenario code ..."
            echo "
            from step3 import kylo, han
            print(han.grandparents)
            print(kylo.grandparents)
            " | poetry run python &> output.txt

            echo "Asserting scenario output ..."
            echo "[]
            [Padme Amidala, Anakin Skywalker, None, None]" | diff output.txt -

      - run:
          name: Step 4
          command: |
            poetry run pytest --cov-report html --cov=step4 step4.py

            echo "Running scenario code ..."
            poetry run mypy step4.py &> output.txt || true

            echo "Asserting scenario output ..."
            echo 'step4.py:27: error: Incompatible return value type (got "List[Optional[Person]]", expected "List[Person]")
            Found 1 error in 1 file (checked 1 source file)' | diff output.txt -

      - run:
          name: Step 5
          command: |
            poetry run pytest --cov-report html --cov=step5 step5.py
            poetry run mypy step5.py

            echo "Running scenario code ..."
            echo "
            from step5 import kylo, han
            print(han.grandparents)
            print(kylo.grandparents)
            " | poetry run python &> output.txt

            echo "Asserting scenario output ..."
            echo "[]
            [Padme Amidala, Anakin Skywalker]" | diff output.txt -

      - run:
          name: Step 6
          command: |
            poetry run pytest --cov-report html --cov=step6 step6.py
            poetry run mypy step6.py

            echo "Running scenario code ..."
            echo "
            from step6 import luke
            import json
            print(json.dumps(luke.json))
            " | poetry run python &> output.txt

            echo "Asserting scenario output ..."
            echo '{"name": "Luke Skywalker"}' | diff output.txt -

      - run:
          name: Step 7
          command: |
            poetry run pytest --cov-report html --cov=step7 step7.py
            poetry run mypy step7.py

            echo "Running scenario code ..."
            echo "
            from step7 import luke
            import json
            print(json.dumps(luke.json))
            " | poetry run python &> output.txt || true
            tail -n 1 output.txt > output.txt.tail

            echo "Asserting scenario output ..."
            echo "TypeError: Object of type Person is not JSON serializable" | diff output.txt.tail -

      - run:
          name: Step 8
          command: |
            poetry run pytest --cov-report html --cov=step8 step8.py
            echo "Running scenario code ..."
            poetry run mypy step8.py &> output.txt || true

            echo "Asserting scenario output ..."
            echo 'step8.py:23: error: Dict entry 1 has incompatible type "str": "Optional[Person]"; expected "str": "Optional[str]"
            step8.py:24: error: Dict entry 2 has incompatible type "str": "Optional[Person]"; expected "str": "Optional[str]"
            Found 2 errors in 1 file (checked 1 source file)' | diff output.txt -

      - run:
          name: Step 9
          command: |
            poetry run pytest --cov-report html --cov=step9 step9.py
            poetry run mypy step9.py

            echo "Running scenario code ..."
            echo "
            from step9 import luke
            import json
            print(json.dumps(luke.json))
            " | poetry run python &> output.txt

            echo "Asserting scenario output ..."
            echo '{"name": "Luke Skywalker", "mother": "Padme Amidala", "father": "Anakin Skywalker"}' | diff output.txt -

      - run:
          name: Step 10
          command: |
            poetry run pytest --cov-report html --cov=step10 step10.py

            echo "Running scenario code ..."
            echo "
            from step10 import luke, anakin
            import json
            print(json.dumps(luke.json))
            print(json.dumps(anakin.json))
            " | poetry run python &> output.txt || true
            head -n 1 output.txt > output.txt.head
            tail -n 1 output.txt > output.txt.tail

            echo "Asserting scenario output ..."
            echo '{"name": "Luke Skywalker", "mother": "Padme Amidala", "father": "Anakin Skywalker", "maternal_grandmother": "Jobal Naberrie"}' | diff output.txt.head -
            echo "AttributeError: 'NoneType' object has no attribute 'name'" | diff output.txt.tail -

      - run:
          name: Step 11
          command: |
            poetry run pytest --cov-report html --cov=step11 step11.py

            echo "Running scenario code ..."
            poetry run mypy step11.py &> output.txt || true

            echo "Asserting scenario output ..."
            echo 'step11.py:31: error: Item "None" of "Optional[Person]" has no attribute "name"
            Found 1 error in 1 file (checked 1 source file)' | diff output.txt -

      - run:
          name: Step 12
          command: |
            poetry run pytest --cov-report html --cov=step12 step12.py
            poetry run mypy step12.py

            echo "Running scenario code ..."
            echo "
            from step12 import luke, anakin
            import json
            print(json.dumps(luke.json))
            print(json.dumps(anakin.json))
            " | poetry run python &> output.txt

            echo "Asserting scenario output ..."
            echo '{"name": "Luke Skywalker", "mother": "Padme Amidala", "father": "Anakin Skywalker", "maternal_grandmother": "Jobal Naberrie"}
            {"name": "Anakin Skywalker", "mother": "Shmi Skywalker Lars", "father": "The Force", "maternal_grandmother": null}' | diff output.txt -

      - run:
          name: Step 13
          command: |
            poetry run pytest --cov-report html --cov=step13 step13.py

            echo "Running scenario code ..."
            poetry run mypy --strict step13.py &> output.txt || true
            tail -n 1 output.txt > output.txt.tail

            echo "Asserting scenario output ..."
            echo 'Found 16 errors in 1 file (checked 1 source file)' | diff output.txt.tail -

      - run:
          name: Step 14
          command: |
            poetry run pytest --cov-report html --cov=step14 step14.py
            poetry run mypy --strict step14.py


      - run:
          name: Step 15
          command: |
            poetry run pytest --cov-report html --cov=step15 step15.py
            poetry run mypy --strict step15.py
